{"version":3,"sources":["logo.svg","api/todo-api.js","Redux/todo-reducer.js","Components/Loader/Loader.jsx","Components/Todo/Modals/CreateTaskModal.jsx","Components/Todo/Modals/EditTaskModal.js","Components/Todo/Todo.jsx","App.js","Redux/store.js","index.js"],"names":["APIInstance","axios","create","baseURL","headers","todoAPI","get","then","r","data","task","post","put","taskId","delete","START_FETCHING","END_FETCHING","START_UPDATING","END_UPDATING","GET_TODO_SUCCESS","GET_TODO_FAIL","GET_TASKS_SUCCESS","GET_TASKS_FAIL","UPDATE_TASK_SUCCESS","DELETE_TASK_SUCCESS","CREATE_TASK_SUCCESS","initialState","todo","isFetching","isUpdating","endFetching","type","startUpdating","endUpdating","updateTask","dispatch","a","response","payload","Loader","React","memo","className","CircularProgress","size","connect","state","createTask","createModal","setCreateModal","useSelector","formik","useFormik","initialValues","title","description","onSubmit","formData","FormData","Object","keys","forEach","key","append","resetForm","antIcon","LoadingOutlined","style","fontSize","spin","onClick","icon","faTimes","handleSubmit","autoComplete","htmlFor","value","values","onChange","handleChange","name","placeholder","indicator","editModals","setEditModal","id","prev","disabled","Todo","useState","fetch","setFetch","setEditModals","tasks","useDispatch","useEffect","handleDelete","deleteFetching","map","index","completed","newTask","completeFetching","handleComplete","faCheck","faPencilAlt","App","rootReducer","combineReducers","action","error","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c9063ad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from \"axios\";\r\n\r\nexport const APIInstance = axios.create({\r\n    baseURL: 'https://sinelnikov-todo-app.herokuapp.com/api/',\r\n    headers: {\r\n        \"Content-Type\": \"multipart/form-data\"\r\n    }\r\n})\r\n\r\nexport const todoAPI = {\r\n    getTodo() {\r\n        return APIInstance.get('todo/').then(r => r.data)\r\n    },\r\n    createTask(task) {\r\n        return APIInstance.post(`todo/tasks/`, task).then(r => r.data)\r\n    },\r\n    updateTask(task) {\r\n        return APIInstance.put(`todo/tasks/${task.get('id')}`, task).then(r => r.data)\r\n    },\r\n    deleteTask(taskId) {\r\n        return APIInstance.delete(`todo/tasks/${taskId}`).then(r => r.data)\r\n    }\r\n}","import {todoAPI} from \"../api/todo-api\";\r\n\r\nconst START_FETCHING = 'START_FETCHING'\r\nconst END_FETCHING = 'END_FETCHING'\r\nconst START_UPDATING = 'START_UPDATING'\r\nconst END_UPDATING = 'END_UPDATING'\r\nconst GET_TODO_SUCCESS = 'GET_TODO_SUCCESS'\r\nconst GET_TODO_FAIL = 'GET_TODO_FAIL'\r\nconst GET_TASKS_SUCCESS = 'GET_TASKS_SUCCESS'\r\nconst GET_TASKS_FAIL = 'GET_TASKS_FAIL'\r\nconst UPDATE_TASK_SUCCESS = 'UPDATE_TASK_SUCCESS'\r\nconst UPDATE_TASK_FAIL = 'UPDATE_TASK_FAIL'\r\nconst DELETE_TASK_SUCCESS = 'DELETE_TASK_SUCCESS'\r\nconst DELETE_TASK_FAIL = 'DELETE_TASK_FAIL'\r\nconst CREATE_TASK_SUCCESS = 'CREATE_TASK_SUCCESS'\r\nconst CREATE_TASK_FAIL = 'CREATE_TASK_FAIL'\r\n\r\nconst initialState = {\r\n    todo: null,\r\n    isFetching: true,\r\n    isUpdating: false\r\n}\r\n\r\nexport const todoReducer = (state = initialState, action) => {\r\n    const {type, payload} = action\r\n    switch (type) {\r\n        case START_FETCHING: {\r\n            return {...state, isFetching: true}\r\n        }\r\n        case END_FETCHING: {\r\n            return {...state, isFetching: false}\r\n        }\r\n        case START_UPDATING: {\r\n            return {...state, isUpdating: true}\r\n        }\r\n        case END_UPDATING: {\r\n            return {...state, isUpdating: false}\r\n        }\r\n        case GET_TODO_SUCCESS: {\r\n            return {...state, todo: {...payload}, error: 0}\r\n        }\r\n        case GET_TODO_FAIL: {\r\n            return {...state, todo: null}\r\n        }\r\n        case GET_TASKS_SUCCESS: {\r\n            return {...state, todo: {...state.todo, tasks: [...payload]}}\r\n        }\r\n        case GET_TASKS_FAIL: {\r\n            return {...state, todo: {...state.todo, todo: null}}\r\n        }\r\n        case CREATE_TASK_SUCCESS: {\r\n            return {...state, todo: {...state.todo, tasks: [...payload]}}\r\n        }\r\n        case UPDATE_TASK_SUCCESS: {\r\n            return {...state, todo: {...state.todo, tasks: [...payload]}}\r\n        }\r\n        case DELETE_TASK_SUCCESS: {\r\n            return {...state, todo: {...state.todo, tasks: [...payload]}}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nconst startFetching = () => {\r\n    return {\r\n        type: START_FETCHING\r\n    }\r\n}\r\nconst endFetching = () => {\r\n    return {\r\n        type: END_FETCHING\r\n    }\r\n}\r\n\r\nconst getTodoSuccess = (payload) => {\r\n    return {\r\n        type: GET_TODO_SUCCESS,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const getTodo = () => async (dispatch) => {\r\n    try {\r\n        dispatch(startFetching())\r\n        const response = await todoAPI.getTodo()\r\n        dispatch(getTodoSuccess(response))\r\n        dispatch(endFetching())\r\n    } catch (err) {\r\n        dispatch(endFetching())\r\n    }\r\n}\r\n\r\nconst startUpdating = () => {\r\n    return {\r\n        type: START_UPDATING\r\n    }\r\n}\r\nconst endUpdating = () => {\r\n    return {\r\n        type: END_UPDATING\r\n    }\r\n}\r\n\r\nconst updateTaskSuccess = (payload) => {\r\n    return {\r\n        type: UPDATE_TASK_SUCCESS,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const updateTask = (task) => async (dispatch) => {\r\n    try {\r\n        dispatch(startUpdating())\r\n        const response = await todoAPI.updateTask(task)\r\n        dispatch(updateTaskSuccess(response))\r\n        dispatch(endUpdating())\r\n    } catch (err) {\r\n\r\n    }\r\n}\r\n\r\nconst createTaskSuccess = (payload) => {\r\n    return {\r\n        type: CREATE_TASK_SUCCESS,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const createTask = (task) => async (dispatch) => {\r\n    try {\r\n        dispatch(startUpdating())\r\n        const response = await todoAPI.createTask(task)\r\n        dispatch(createTaskSuccess(response))\r\n        dispatch(endUpdating())\r\n    } catch (err) {\r\n\r\n    }\r\n}\r\n\r\nconst deleteTaskSuccess = (payload) => {\r\n    return {\r\n        type: UPDATE_TASK_SUCCESS,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskId) => async (dispatch) => {\r\n    try {\r\n        dispatch(startUpdating())\r\n        const response = await todoAPI.deleteTask(taskId)\r\n        dispatch(deleteTaskSuccess(response))\r\n        dispatch(endUpdating())\r\n    } catch (err) {\r\n\r\n    }\r\n}","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\n\r\nconst Loader = React.memo(() => {\r\n    return(\r\n        <div className={\"progress\"}>\r\n            <CircularProgress size={100}/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Loader","import {useFormik} from \"formik\";\r\nimport {faTimes} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {createTask} from \"../../../Redux/todo-reducer\";\r\nimport {Spin} from \"antd\";\r\nimport {LoadingOutlined} from \"@ant-design/icons\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst CreateTaskModal = ({createModal, setCreateModal, createTask}) => {\r\n\r\n    const isUpdating = useSelector(state => state.todo.isUpdating)\r\n\r\n    const onSubmit = (data) => {\r\n        const formData = new FormData()\r\n        Object.keys(data).forEach(key => formData.append(key, data[key]))\r\n        createTask(formData).then(() => {\r\n            formik.resetForm()\r\n            setCreateModal(false)\r\n        })\r\n\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            title: '',\r\n            description: ''\r\n        },\r\n        onSubmit\r\n    })\r\n\r\n    const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />\r\n\r\n    return(\r\n        <div className={`custom-modal ${createModal ? \"open\" : \"\"}`}>\r\n            <div className=\"modal__body shadow\">\r\n                <span onClick={() => setCreateModal(false)} className={\"modal__close\"}><FontAwesomeIcon icon={faTimes}/></span>\r\n                <h1 className=\"modal__title\">Create Task</h1>\r\n                <form onSubmit={formik.handleSubmit} className=\"modal__form\" autoComplete={'off'}>\r\n                    <div className=\"form__input-block\">\r\n                        <label htmlFor=\"title\" className=\"form__label\">Title</label>\r\n                        <input value={formik.values.title}\r\n                               onChange={formik.handleChange}\r\n                               type=\"text\"\r\n                               className=\"form__input\"\r\n                               name={'title'}\r\n                               placeholder={'Title'}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form__input-block\">\r\n                        <label htmlFor=\"description\" className=\"form__label\">Description</label>\r\n                        <textarea  value={formik.values.description}\r\n                                   onChange={formik.handleChange}\r\n                                   className=\"form__input\"\r\n                                   name={'description'}\r\n                                   placeholder={'Description'}/>\r\n                    </div>\r\n                    <button type={\"submit\"} className=\"todo__add\">{isUpdating ? <Spin indicator={antIcon} /> : \"Create\"}</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (state) => ({\r\n\r\n})\r\n\r\nexport default connect(mapDispatchToProps, {createTask})(CreateTaskModal)","import {useFormik} from \"formik\";\r\nimport {faTimes} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {createTask, updateTask} from \"../../../Redux/todo-reducer\";\r\nimport { connect } from 'react-redux'\r\nimport {message, Spin} from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nconst EditTaskModal = ({editModals, setEditModal, task, updateTask}) => {\r\n\r\n    const isUpdating = useSelector(state => state.todo.isUpdating)\r\n\r\n    const onSubmit = (data) => {\r\n        const formData = new FormData()\r\n        Object.keys(data).forEach(key => formData.append(key, data[key]))\r\n        formData.append('id', task.id)\r\n        updateTask(formData).then(() => {\r\n            setEditModal(prev => ({...prev, [task.id]: false}))\r\n        })\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            title: task.title,\r\n            description: task.description\r\n        },\r\n        onSubmit\r\n    })\r\n\r\n    const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />\r\n\r\n    return(\r\n        <div className={`custom-modal ${editModals[task.id] ? \"open\" : \"\"}`}>\r\n            <div className=\"modal__body shadow\">\r\n                <span onClick={() => setEditModal(prev => ({...prev, [task.id]: false}))} className={\"modal__close\"}><FontAwesomeIcon icon={faTimes}/></span>\r\n                <h1 className=\"modal__title\">Edit Task</h1>\r\n                <form onSubmit={formik.handleSubmit} className=\"modal__form\" autoComplete={'off'}>\r\n                    <div className=\"form__input-block\">\r\n                        <label htmlFor=\"title\" className=\"form__label\">Title</label>\r\n                        <input value={formik.values.title}\r\n                               onChange={formik.handleChange}\r\n                               type=\"text\"\r\n                               className=\"form__input\"\r\n                               name={'title'}\r\n                               placeholder={'Title'}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form__input-block\">\r\n                        <label htmlFor=\"description\" className=\"form__label\">Description</label>\r\n                        <textarea  value={formik.values.description}\r\n                                   onChange={formik.handleChange}\r\n                                   className=\"form__input\"\r\n                                   name={'description'}\r\n                                   placeholder={'Description'}/>\r\n                    </div>\r\n                    <button disabled={isUpdating} type={\"submit\"} className=\"todo__add\">{isUpdating ? <Spin indicator={antIcon} /> : \"Update\"}</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (state) => ({})\r\n\r\nexport default connect(mapDispatchToProps, {updateTask})(EditTaskModal)","import {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faPencilAlt, faCheck, faTimes} from '@fortawesome/free-solid-svg-icons'\r\nimport {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {deleteTask, getTodo, updateTask} from \"../../Redux/todo-reducer\";\r\nimport Loader from \"../Loader/Loader\";\r\nimport CreateTaskModal from \"./Modals/CreateTaskModal\";\r\nimport EditTaskModal from \"./Modals/EditTaskModal\";\r\nimport {LoadingOutlined} from \"@ant-design/icons\";\r\nimport {Spin} from \"antd\";\r\n\r\n\r\nconst Todo = () => {\r\n\r\n    const [fetch, setFetch] = useState({})\r\n    const [createModal, setCreateModal] = useState(false)\r\n    const [editModals, setEditModals] = useState({})\r\n\r\n    const isFetching = useSelector(state => state.todo.isFetching)\r\n    const tasks = useSelector(state => state.todo.todo?.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodo())\r\n    }, [])\r\n\r\n    const handleComplete = (task) => {\r\n        let formData = new FormData()\r\n        let newTask = {...task, completed: !task.completed}\r\n        Object.keys(newTask).forEach(key => formData.append(key, newTask[key]))\r\n        setFetch(prev => ({...prev, [task.id]: {completeFetching: true}}))\r\n        dispatch(updateTask(formData)).then(() => setFetch(prev => ({...prev, [task.id]: {completeFetching: false}})))\r\n    }\r\n\r\n    const handleDelete = (task) => {\r\n        setFetch(prev => ({...prev, [task.id]: {deleteFetching: true}}))\r\n        dispatch(deleteTask(task.id)).then(() => setFetch(prev => ({...prev, [task.id]: {deleteFetching: false}})))\r\n    }\r\n\r\n    const openCreateModal = () => {\r\n        setCreateModal(true)\r\n    }\r\n\r\n    const openEditModal = (taskId) => {\r\n        setEditModals(prev => ({...prev, [taskId]: true}))\r\n    }\r\n\r\n    if (isFetching) {\r\n        return <Loader/>\r\n    }\r\n\r\n    const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />\r\n\r\n    return (\r\n        <>\r\n            <div className={'todo shadow-lg'}>\r\n                <div className=\"todo__controls\">\r\n                    <button onClick={openCreateModal} className=\"todo__add\">Add</button>\r\n                </div>\r\n                <div className=\"todo__list\">\r\n                    {tasks.map((task, index) => {\r\n                        return (\r\n                            <div key={task.id} className=\"todo__item shadow\">\r\n                                <div className=\"todo__item-info\">\r\n                                    <h2 title={task.title} className=\"todo__item-title\">{task.completed ?\r\n                                        <strike>{task.title}</strike> : task.title}</h2>\r\n                                    <p className=\"todo__item-description\">{task.completed ?\r\n                                        <strike>{task.description}</strike> : task.description}</p>\r\n                                </div>\r\n                                <div className=\"todo__item-controls\">\r\n                                    <button onClick={() => handleComplete(task)} className=\"todo__complete\">\r\n                                        {fetch[task.id]?.completeFetching ? <Spin indicator={antIcon} /> : <FontAwesomeIcon icon={faCheck}/>}\r\n                                    </button>\r\n                                    <button onClick={() => openEditModal(task.id)} className=\"todo__edit\">\r\n                                        <FontAwesomeIcon icon={faPencilAlt}/>\r\n                                    </button>\r\n                                    <button onClick={() => handleDelete(task)} className=\"todo__delete\">\r\n                                        {fetch[task.id]?.deleteFetching ? <Spin indicator={antIcon} /> : <FontAwesomeIcon icon={faTimes}/>}\r\n                                    </button>\r\n                                </div>\r\n                                <EditTaskModal task={task} setEditModal={setEditModals} editModals={editModals}/>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <CreateTaskModal createModal={createModal} setCreateModal={setCreateModal}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Todo","import logo from './logo.svg';\nimport './App.css';\nimport Todo from \"./Components/Todo/Todo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Todo/>\n    </div>\n  );\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {todoReducer} from \"./todo-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todo: todoReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nlet store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nwindow.__store__ = store\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}